<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.samgyeobsal.mapper.FundingMapper">

    <select id="getFundingList" resultType="funding">
        select f.fid,
               fstore_name,
               ftitle,
               nvl(totalprice,0) as totalprice,
               nvl(totalemail,0) as totalemail,
               nvl(totalreview,0) as totalreview,
               fthumb,
               trunc(cfunding_end_date-sysdate,0) expire,
               c.cid,
               ct.ctid, ct.ctname, t.tid, t.tname, f.memail
        from funding f
        inner join category ct on (f.ctid = ct.ctid)
        left join (select fid,sum(sumprice) totalprice
                   from (select distinct f.fid,o.oid, sum(oprice) sumprice
                         from order_item oi
                         join product_option po on oi.poid=po.poid
                         join funding_product fp on po.fpid=fp.fpid
                         join funding f on f.fid=fp.fid
                         join orders o on oi.oid=o.oid
                         where ostatus = 'COMPLETE'
                         group by f.fid, o.oid)
                   group by fid) total on total.fid= f.fid
        left join ( select f.fid,
                           count(distinct o.memail) as totalemail
                    from order_item oi
                    join product_option po on oi.poid=po.poid
                    join funding_product fp on po.fpid=fp.fpid
                    join funding f on f.fid=fp.fid
                    join orders o on oi.oid=o.oid
                    where ostatus = 'COMPLETE'
                    group by f.fid) cnt on cnt.fid=f.fid
        join competition c on c.cid=f.cid and c.tid=f.tid
        inner join the_hyundai t  on(f.tid = t.tid)
        left join (select f.fid,
                          count(r.memail) as totalreview
                   from review r
                   join funding f on r.fid=f.fid
                   group by f.fid) r on r.fid = f.fid
        where fstatus = 'FUNDING' and sysdate between cfunding_start_date  and cfunding_end_date
        <if test="criteria.type !=null and !criteria.type.equals('')">
            and f.ctid=#{criteria.type}
        </if>
        <if test="criteria.tid != null and !criteria.tid.equals('')">
            and c.tid = #{criteria.tid}
        </if>
        order by
        <choose>
            <when test="criteria.sort =='모집금액순'.toString()">
                totalprice desc
            </when>
            <when test="criteria.sort =='펀딩한 사람순'.toString()">
                totalemail desc
            </when>
            <when test="criteria.sort =='최신순'.toString()">
                fdate
            </when>
            <when test="criteria.sort =='응원댓글순'.toString()">
                totalreview desc
            </when>
            <otherwise>
                totalprice desc
            </otherwise>
        </choose>
        ,f.fid
        OFFSET #{criteria.page}*12 ROWS FETCH NEXT 12 ROWS ONLY
    </select>

    <select id ="getFundingDetail" resultMap="util.fundingDetailMap" >
        select fstore_name,
               fthumb,
               fsummary,
               f.fid,
               ftitle,
               nvl(totalprice,0) as totalprice,
               nvl(totalemail,0) as totalemail,
               tname,
               ctname,
               fstory,
               fdate,
               case when fstatus='FUNDING' then cfunding_end_date
                    else cstore_end_date end end_date,
               fstatus,
               fstore_score,
               ffunding_score,
               case when fstatus='FUNDING' then trunc(cfunding_end_date-sysdate,0)
                    else trunc(cstore_end_date-sysdate,0) end  expire,
               fporigin_price,
               fpprice,
               fptitle,
               fpcontent,
               fiurl,
               nvl(rfcount,0) rfcount,
               nvl(rscount,0) rscount,
               fp.fpid
        from funding f
                 left join (select fid,sum(sumprice) totalprice
                            from (select distinct f.fid,o.oid, sum(oprice) sumprice
                                  from order_item oi
                                  join product_option po on oi.poid=po.poid
                                  join funding_product fp on po.fpid=fp.fpid
                                  join funding f on f.fid=fp.fid
                                   join orders o on oi.oid=o.oid
                                  where ostatus = 'COMPLETE'
                                  group by f.fid, o.oid)
                            group by fid) total on total.fid= f.fid
                 left join ( select f.fid,
                                    count(distinct o.memail) as totalemail
                             from order_item oi
                                      join product_option po on oi.poid=po.poid
                                      join funding_product fp on po.fpid=fp.fpid
                                      join funding f on f.fid=fp.fid
                                      join orders o on oi.oid=o.oid
                             where ostatus = 'COMPLETE'
                             group by f.fid) cnt on cnt.fid=f.fid
                 join competition c on c.cid=f.cid and c.tid=f.tid
                 join the_hyundai t on t.tid = c.tid
                 join category ct on ct.ctid=f.ctid
                 left join funding_product fp on fp.fid=f.fid
                 left join funding_img fi on f.fid=fi.fid
                 left join (select fid,count(*) rfcount from review where fid=#{fid} and rtype='FUNDING' group by fid) rf on rf.fid=f.fid
                 left join (select fid,count(*) rscount from review where fid=#{fid} and rtype='STORE' group by fid) rs on rs.fid=f.fid
        where  f.fid=#{fid} and fstatus =#{fstatus} and fpstatus = 1
    </select>

    <select id="getReviewList" resultType="review">
        select rscore,
        rtype,
        rimg_url,
        memail,
        to_char(rdate,'YYYY.MM.DD') rdate,
        rcontent,
        recontent,
        redate
        from review
        where fid=#{criteria.fid}
          <if test="criteria.type != null and !criteria.type.equals('')">
              and rtype=upper(#{criteria.type})
          </if>
        order by
        <choose>
            <when test="criteria.sort =='최신순'.toString()">
                rdate desc
            </when>
            <when test="criteria.sort =='높은 평점순'.toString()">
                rscore desc
            </when>
            <when test="criteria.sort =='낮은 평점순'.toString()">
                rscore
            </when>
            <otherwise>
                rdate desc
            </otherwise>
        </choose>
        ,memail
        OFFSET #{criteria.page}*10 ROWS FETCH NEXT 10 ROWS ONLY

    </select>

    <select id="findProductListByFundingId" resultMap="util.productMap">
        select fp.fpid, fp.fid, fp.fporigin_price,
               fp.fpprice, fp.fptitle, fp.fpcontent,
               po.poid, po.pooption
        from funding_product fp
                 left join product_option po on (fp.fpid = po.fpid and po.postatus='1')
        where fp.fid = #{fundingId} and fp.fpstatus = '1'
    </select>

    <select id="findProductByFundingIdAndProductId" resultMap="util.productMap">
        select fp.fpid, fp.fid, fp.fporigin_price,
               fp.fpprice, fp.fptitle, fp.fpcontent,
               po.poid, po.pooption
        from funding_product fp
                 left join product_option po on (fp.fpid = po.fpid and po.postatus='1')
        where fp.fid = #{fundingId}
          and fp.fpid = #{productId}
    </select>

</mapper>