<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.samgyeobsal.mapper.OrderMapper">

    <insert id="save"
            parameterType="com.samgyeobsal.domain.order.OrderRequest">
        INSERT INTO
            ORDERS( OID, OPHONE, OMEMO,
                    OORIGINPRICE, OAFTERPRICE, OSTATUS, MID, PMCODE, CPID, OEMAIL)
        VALUES(#{oid}, #{ophone}, #{omemo}, #{obeforePrice}, #{oafterPrice}, #{oState},
               #{mid}
                  , 'pmcode1', #{cpid}, #{oemail})
    </insert>

    <update id="updateOrder">
        update ORDERS set OSTATUS = #{oStatus} where OID = #{oId}
    </update>

    <select id="getProductList" resultMap="util.productDetailMap">
        select fp.fpid,
               fptitle,
               fp.fporigin_price,
               fpprice,
               fpcontent,
               poid,
               pooption
        from funding_product fp
                 join product_option po on fp.fpid=po.fpid
        where fid=#{fid} and fpstatus = 1 and postatus = 1
        order by fp.fpid,po.poid
    </select>

    <select id="getOrderList" resultMap="util.orderListMap">
        select fp.fpid,
        fid,
        fpprice,
        fptitle,
        fp.fporigin_price,
        fp.fpcontent,
        poid,pooption
        from funding_product fp
        join product_option po on fp.fpid=po.fpid
        where poid in
        <foreach collection="item" item="step" index="index" separator="," open="(" close=")">
            #{step.poid}
        </foreach>
    </select>

    <select id="findOrderListByMemberId" resultMap="util.orderListResultMap">
        select o.oid, o.ophone, o.omemo, o.oused_mileage, o.oorigin_price,
               o.ostatus, o.odate, o.oprice,o.memail, o.pmcode, o.qrused_date, o.cpid,
               oi.poid, oi.oicount, oi.oitotalprice,
               po.pooption,po.fpid,
               fp.fid, fp.fporigin_price, fp.fpprice, fp.fptitle, fp.fpcontent,
               f.fid, f.fstore_name, f.ftitle, f.fsummary, f.fstory, f.fdate, f.fstatus,
               f.fstore_score, f.ffunding_score, f.ctid, f.fthumb, f.cid, f.tid,
               ct.ctname
        from orders o
                 inner join member m on (o.memail = m.memail)
                 inner join order_item oi on (oi.oid = o.oid)
                 inner join product_option po on (oi.poid = po.poid)
                 inner join funding_product fp on (fp.fpid = po.fpid)
                 inner join funding f on (f.fid = fp.fid)
                 inner join category ct on (ct.ctid = f.ctid)
        where m.memail = #{memberId}
        order by o.odate desc
    </select>

    <select id="findOrderByOrderId" resultMap="util.orderListResultMap">
        select o.oid, o.ophone, o.omemo, o.oused_mileage, o.oorigin_price,
               o.ostatus, o.odate, o.oprice,o.memail, o.pmcode, o.qrused_date, o.cpid,
               oi.poid, oi.oicount, oi.oitotalprice,
               po.pooption,po.fpid,
               fp.fid, fp.fporigin_price, fp.fpprice, fp.fptitle, fp.fpcontent,
               f.fid, f.fstore_name, f.ftitle, f.fsummary, f.fstory, f.fdate, f.fstatus,
               f.fstore_score, f.ffunding_score, f.ctid, f.fthumb, f.cid, f.tid,
               ct.ctname
        from orders o
                 inner join member m on (o.memail = m.memail)
                 inner join order_item oi on (oi.oid = o.oid)
                 inner join product_option po on (oi.poid = po.poid)
                 inner join funding_product fp on (fp.fpid = po.fpid)
                 inner join funding f on (f.fid = fp.fid)
                 inner join category ct on (ct.ctid = f.ctid)
        where o.oid = #{orderId}
        order by o.odate desc
    </select>

    <select id="getFtitle" resultType="orderFtitle">
        select fid, ftitle from funding where fid=#{fid}
    </select>




</mapper>